{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"Get%20Started/","text":"Get Started To get started download the trustie package from here: https://docs.trustiedev.medicaa.ch/downloads/trustie.zip Installation Then add the trustie.js into your application with a script tag or by including it in your final js build output. 1 < script src = \"/trustie.js\" ></ script > Then add the olm.wasm file from the archive to the root file path of your webserver. As a last step move the midata.png to the root web folder as well. To check if you did everything correctly try to reach the two files like this: http://yourwebserver.ch/olm.wasm and http://yourwebserver.ch/midata.png If you installed everything you can now use the matrix webcomponent in your application: Now you can use the trustie-component component in your application. 1 < trustie-component ></ trustie-component > Configuration You can configure the component by passing variables into it. 1 < trustie-component homeserver = \"https://matrix.myserver.ch\" ></ trustie-component > You can configure the following variables: Variable Values Description Example Values homeserver string Any homeserver including the procotol (http/https) https://matrix.myserver.ch API You can use the following functions to interact with the element reference. To use this API you need a reference to the trustie-component element. Doing this will depend on your framework, to keep it simple the examples are for plain javascript: 1 let trustie = document . querySelector ( 'trustie-component' ) Show or hide the component. This can be useful for integrating the component into a mobile app. As the component uses some fixed elements so the header and footer stay in the right place it might be needed to get the user out of the chat interface. 1 2 trustie . hide () trustie . show () You can use this method to send a text message in the current chat. 1 trustie . sendTextMessage ( \"Hello\" ) `","title":"Get Started"},{"location":"Get%20Started/#get-started","text":"To get started download the trustie package from here: https://docs.trustiedev.medicaa.ch/downloads/trustie.zip","title":"Get Started"},{"location":"Get%20Started/#installation","text":"Then add the trustie.js into your application with a script tag or by including it in your final js build output. 1 < script src = \"/trustie.js\" ></ script > Then add the olm.wasm file from the archive to the root file path of your webserver. As a last step move the midata.png to the root web folder as well. To check if you did everything correctly try to reach the two files like this: http://yourwebserver.ch/olm.wasm and http://yourwebserver.ch/midata.png If you installed everything you can now use the matrix webcomponent in your application: Now you can use the trustie-component component in your application. 1 < trustie-component ></ trustie-component >","title":"Installation"},{"location":"Get%20Started/#configuration","text":"You can configure the component by passing variables into it. 1 < trustie-component homeserver = \"https://matrix.myserver.ch\" ></ trustie-component > You can configure the following variables: Variable Values Description Example Values homeserver string Any homeserver including the procotol (http/https) https://matrix.myserver.ch","title":"Configuration"},{"location":"Get%20Started/#api","text":"You can use the following functions to interact with the element reference. To use this API you need a reference to the trustie-component element. Doing this will depend on your framework, to keep it simple the examples are for plain javascript: 1 let trustie = document . querySelector ( 'trustie-component' ) Show or hide the component. This can be useful for integrating the component into a mobile app. As the component uses some fixed elements so the header and footer stay in the right place it might be needed to get the user out of the chat interface. 1 2 trustie . hide () trustie . show () You can use this method to send a text message in the current chat. 1 trustie . sendTextMessage ( \"Hello\" ) `","title":"API"},{"location":"Get%20Started/client/","text":"Client Architecture The client is built as a Angular 13 component which is exported as a webcomponent. With this approach it can be integrated into any app, no matter the platform as long as it has a modern webview. Trustie This project was generated with Angular CLI version 13.0.2. Documentation First install the mkdocs tools described here: https://squidfunk.github.io/mkdocs-material/getting-started/ To generate the documentation you can use mkdocs serve Development server Run ng serve for a dev server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files. Architecture The main part of the component is based in projects/matrix/src/lib/matrix.component.ts","title":"Client Architecture"},{"location":"Get%20Started/client/#client-architecture","text":"The client is built as a Angular 13 component which is exported as a webcomponent. With this approach it can be integrated into any app, no matter the platform as long as it has a modern webview.","title":"Client Architecture"},{"location":"Get%20Started/client/#trustie","text":"This project was generated with Angular CLI version 13.0.2.","title":"Trustie"},{"location":"Get%20Started/client/#documentation","text":"First install the mkdocs tools described here: https://squidfunk.github.io/mkdocs-material/getting-started/ To generate the documentation you can use mkdocs serve","title":"Documentation"},{"location":"Get%20Started/client/#development-server","text":"Run ng serve for a dev server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files.","title":"Development server"},{"location":"Get%20Started/client/#architecture","text":"The main part of the component is based in projects/matrix/src/lib/matrix.component.ts","title":"Architecture"}]}